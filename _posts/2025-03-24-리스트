



---
layout: single
title:  "250324 리스트"
categories: PythonLeaning
tag: [python, blog, jupyter]
toc: true
author_profile: false
---

<head>
  <style>
    table.dataframe {
      white-space: normal;
      width: 100%;
      height: 240px;
      display: block;
      overflow: auto;
      font-family: Arial, sans-serif;
      font-size: 0.9rem;
      line-height: 20px;
      text-align: center;
      border: 0px !important;
    }

    table.dataframe th {
      text-align: center;
      font-weight: bold;
      padding: 8px;
    }

    table.dataframe td {
      text-align: center;
      padding: 8px;
    }

    table.dataframe tr:hover {
      background: #b8d1f3; 
    }

    .output_prompt {
      overflow: auto;
      font-size: 0.9rem;
      line-height: 1.45;
      border-radius: 0.3rem;
      -webkit-overflow-scrolling: touch;
      padding: 0.8rem;
      margin-top: 0;
      margin-bottom: 15px;
      font: 1rem Consolas, "Liberation Mono", Menlo, Courier, monospace;
      color: $code-text-color;
      border: solid 1px $border-color;
      border-radius: 0.3rem;
      word-break: normal;
      white-space: pre;
    }

  .dataframe tbody tr th:only-of-type {
      vertical-align: middle;
  }

  .dataframe tbody tr th {
      vertical-align: top;
  }

  .dataframe thead th {
      text-align: center !important;
      padding: 8px;
  }

  .page__content p {
      margin: 0 0 0px !important;
  }

  .page__content p > strong {
    font-size: 0.8rem !important;
  }

  </style>
</head>



# **리스트**

* 리스트는 자료를 한꺼번에 담을 수 있는 형식 중의 하나이다. 
* 배열과 비슷하게 콤마를 구분자로 하여 데이터를 담는다. 선언 시에는 괄호를 이용한다.
* 변수명에는 관성적으로 s를 끝에 붙인다. (복수형)
* 문자, 숫자, 논리형 등 모든 데이터를 같이 저장할 수 있다.
* 대괄호 복수 사용하여 또다른 컨테이너 자료형 데이터를 저장할 수도 있다.
* 인덱스는 0부터 시작한다. list1[0] 이런식으로 적어 데이터를 조회할 수 있다. 
* 리스트의 길이는 리스트에 저장된 아이템의 개수를 의미한다. len()함수를 이용한다. 
    * len(list1) 처럼 쓴다. 
* for문을 이용하면 리스트의 아이템을 자동으로 참조할 수 있다. 
    * 이터러블(반복)되는 객체는 리스트도 해당되므로, for문에서 쓸 수 있다.

```python

cars = ['그랜저', '소나타', '말리부', '카니발', '쏘랜토']

for i in range(len(cars))
    print(cars[i])

for car in cars:
    print(car)
```

* 위와 같이 가능하다.

* 아래는 이중 리스트 안의 데이터를 조회하는 다른 방법이다.


```python

studentsCnts = [[1, 19], [2, 36], [3, 22], [4, 18]]

for classNo, cnt in studentsCnts:
    print(f'{classNo}학급 학생수 : {cnt}')

# 이렇게 하면 아래와 같다.

for classNo, cnt in range(len(studentsCnts)):
    print('{}학급 학생수 : {}'.format(studentsCnts[i][0], studentsCnts[i][i]))

# 또는

for classNo, cnt in studentsCnts:
     print('{}학급 학생수 : {}'.format(classNo, cnt))
```


* while 문을 이용해도 for문처럼 다양한 방법으로 조회가 가능하다.

* enumerate() 함수를 이용하여 인덱스와 아이템을 한번에 조회할 수 있다.
     *  enumerate() 를 이용하면 아이템을 열거할 수 있다.

```python

sports = ['농구', '축구', '마라톤', '마라톤', '테니스', '마라톤']

for idx, value in enumerate(sports):
    print('{} : {}'.format(idx, value))

str = 'Hello python'
for for idx, value in enumerate(str):
    print('{} : {}'.format(idx, value))
```

* append() 함수를 이용하여 마지막 인덱스에 아이템을 추가할 수 있다.
* 특정 위치에 추가하려면 insert() 함수를 쓴다. (예:  insert(3, '배구') ) 
* 아이템을 삭제하려면 pop() 또는 remove()를 시용한다.
* pop()는 기본적으로 가장 마지막 인덱스 아이템을 삭제한다. 만약 특정 위치의 아이템을 삭제하려고 한다면 인수를 pop(3)과 같이 지정해 준다. (예: sports.pop(3))
* remove()는 특정 아이템을 삭제한다. 인덱스를 이용하는 pop와는 조금 다르다.
* sports.remove('마라톤') 과 같이 사용한다. 한 개만 삭제한다. 그래서 여러 개를 삭제하려면 while문을 사용하여야 한다. 중복된 데이터 두 개 모두를 삭제하려는 경우, 둘 중 하나만 삭제된다.

```python

while '마라톤' in sports:
    sports.remove('마라톤')

```

* 위와 같이 해야 모든 값을 삭제할 수 있다.












